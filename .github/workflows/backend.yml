# ----------------------------------------------------------
# GitHub Actions Workflow: Docker Compose CI - Frontend Only
# ----------------------------------------------------------

# Name of the workflow displayed in GitHub Actions UI
name: Docker Compose CI - Backend Only

# Events that trigger the workflow
on:
  push:
    branches: [ main ]               # Trigger when code is pushed to the 'main' branch
    paths:
      - 'backend/**'                # Trigger only when files inside the 'backend' directory change
  pull_request:
    branches: [ main ]               # Trigger when a pull request targets the 'main' branch
    paths:
      - 'backend/**'                # Trigger only if backend files are involved
  workflow_dispatch:                # Allow manual triggering of this workflow via the GitHub UI

# Define the job that will be run
jobs:
  build-and-run:
    runs-on: ubuntu-latest          # Use the latest Ubuntu-based GitHub-hosted runner

    steps:
      # Step 1: Checkout the repository code into the runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (advanced build features like caching, multi-platform support)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Build and run containers using Docker Compose
      - name: Docker Compose Up
        run: |
          # Start containers in detached mode and build them fresh
          docker compose up -d --build

      # Step 4: Wait for services to be healthy before testing
      - name: Wait for services to be healthy
        run: |
          echo "Waiting 30 seconds for services to initialize..."
          sleep 30  # Delay to allow containers to start up completely

      # Step 5: Perform a health check by calling backend endpoint
      - name: Test backend service
        run: |
          echo "Testing backend service at http://localhost:8080"
          # Try accessing the backend root URL; fail the build if it doesn't respond properly
          curl -f http://localhost:8080 || (echo "Service test failed!" && exit 1)

      # Step 6: List all running containers (for debugging/log visibility)
      - name: Check running containers
        run: docker ps -a

      # Step 7: Cleanup containers, volumes, and orphan containers after the test
      - name: Clean up
        if: always()  # Always run cleanup step, even if previous steps fail
        run: |
          docker compose down --volumes --remove-orphans
