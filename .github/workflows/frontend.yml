# ----------------------------------------------------------
# GitHub Actions Workflow: Docker Compose CI - Frontend Only
# ----------------------------------------------------------

# Name of the workflow displayed in the GitHub Actions UI
name: Docker Compose CI - Frontend Only

# Define events that will trigger this workflow
on:
  push:
    branches: [ main ]               # Trigger workflow on push to the main branch
    paths:
      - 'frontend/**'               # Trigger only if files inside 'frontend' directory are modified
  pull_request:
    branches: [ main ]               # Trigger on pull requests targeting main branch
    paths:
      - 'frontend/**'               # Trigger only if PR includes changes in 'frontend' directory
  workflow_dispatch:                # Allow manual trigger from GitHub UI

# Define jobs to be executed
jobs:
  build-and-run:
    runs-on: ubuntu-latest          # Use the latest Ubuntu runner provided by GitHub

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (Advanced Docker build capabilities)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Build and start services defined in docker-compose.yml
      - name: Docker Compose Up
        run: |
          docker compose up -d --build  # -d runs in detached mode, --build ensures fresh image build

      # Step 4: Wait for services to fully start up
      - name: Wait for services to be healthy
        run: |
          echo "Waiting 30 seconds for services to initialize..."
          sleep 30                      # Delay to give containers time to initialize properly

      # Step 5: Health check by hitting frontend service endpoint
      - name: Test frontend service
        run: |
          echo "Testing frontend service at http://localhost:80"
          curl -f http://localhost:80 || (echo "Service test failed!" && exit 1)

      # Step 6: Show status of running containers (helpful for debugging)
      - name: Check running containers
        run: docker ps -a

      # Step 7: Clean up containers, volumes, and orphaned services
      - name: Clean up
        if: always()                    # Always run cleanup even if earlier steps fail
        run: |
          docker compose down --volumes --remove-orphans
