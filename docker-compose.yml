version: '3.7'  # Specify the Docker Compose file format version

services:
  # ------------------- Backend Service -------------------
  backend:
    build: ./backend   # Build the backend image using the Dockerfile in the ./backend directory
    ports:
      - "8080:8080"     # Map container's port 8080 to host's port 8080
    networks:
      - app-network     # Connect the backend service to a custom bridge network named 'app-network'
    environment:
      - DB_HOST=db
      - DB_USER=root
      - DB_PASSWORD=rootpass
      - DB_NAME=docker_demo
    depends_on:
      - db              # Ensure database service is started before backend
    healthcheck:        # Health check configuration to monitor backend service health
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]  # Check if /health endpoint is working
      interval: 30s     # Run the health check every 30 seconds
      timeout: 10s      # Timeout if health check takes more than 10 seconds
      retries: 3        # Retry health check 3 times before marking the container as unhealthy

  # ------------------- Frontend Service -------------------
  frontend:
    build: ./frontend   # Build the frontend image using the Dockerfile in the ./frontend directory
    ports:
      - "80:80"         # Map container's port 80 to host's port 80
    networks:
      - app-network     # Connect the frontend service to the same network as backend
    depends_on:
      - backend         # Ensure backend service starts before starting frontend (not a hard dependency on health, just order)
    healthcheck:        # Health check configuration for the frontend service
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]   # Check if /health endpoint is working
      interval: 30s     # Run the health check every 30 seconds
      timeout: 10s      # Timeout if health check takes more than 10 seconds
      retries: 3        # Retry health check 3 times before marking the container as unhealthy

  # ------------------- Auth Service -------------------
  auth:
    build: ./auth       # Build the auth image using the Dockerfile in the ./auth directory
    ports:
      - "6000:6000"     # Map container's port 6000 to host's port 6000
    networks:
      - app-network     # Connect the auth service to the same custom bridge network
    healthcheck:        # Health check configuration for the auth service
      test: ["CMD", "curl", "-f", "http://localhost:6000/health"]  # Check if /health endpoint is working
      interval: 30s     # Run the health check every 30 seconds
      timeout: 10s      # Timeout if health check takes more than 10 seconds
      retries: 3        # Retry health check 3 times before marking the container as unhealthy

  # ------------------- MySQL Database Service -------------------
  db:
    image: mysql:8.0    # Use official MySQL 8.0 image
    ports:
      - "3306:3306"     # Map MySQL port to host
    networks:
      - app-network     # Connect DB service to the same network
    environment:
      - MYSQL_ROOT_PASSWORD=rootpass
      - MYSQL_DATABASE=docker_demo
    volumes:
      - dbdata:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # .................... phpmyadmin service -----------------------    
  phpmyadmin:   # The phpmyadmin service provides a graphical web interface to interact with your MySQL database inside Docker. 
    image: phpmyadmin/phpmyadmin   # It's especially helpful for developers who prefer a GUI over writing SQL queries in the terminal
    restart: always
    ports:
      - "8081:80"       # phpMyAdmin uses a different host port to avoid conflict
    environment:
      - PMA_HOST=db
      - PMA_PORT=3306
      - MYSQL_ROOT_PASSWORD=rootpass
    depends_on:
      - db
    networks:
      - app-network
    healthcheck:
      test: curl --fail http://localhost:80 || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

# ------------------- Custom Docker Network -------------------
networks:
  app-network:
    driver: bridge      # Use the default bridge driver for container networking

# ------------------- Persistent Volume -------------------
volumes:
  dbdata:
