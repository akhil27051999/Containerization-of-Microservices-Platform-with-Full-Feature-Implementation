version: '3.7'  # Specify the Docker Compose file format version

services:
  # ------------------- Backend Service -------------------
  backend:
    build: ./backend   # Build the backend image using the Dockerfile in the ./backend directory
    ports:
      - "8080:8080"     # Map container's port 8080 to host's port 8080
    networks:
      - app-network     # Connect the backend service to a custom bridge network named 'app-network'
    environment:
      - DB_HOST=db
      - DB_USER=root
      - DB_PASSWORD=rootpass
      - DB_NAME=docker_demo
    depends_on:
      - db              # Ensure database service is started before backend
    healthcheck:        # Health check configuration to monitor backend service health and Check if /health endpoint is working
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]  
      interval: 30s     # Run the health check every 30 seconds
      timeout: 10s      # Timeout if health check takes more than 10 seconds
      retries: 3        # Retry health check 3 times before marking the container as unhealthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ------------------- Frontend Service -------------------
  frontend:
    build: ./frontend  
    ports:
      - "80:80"        
    networks:
      - app-network    
    depends_on:
      - backend       
    healthcheck:        
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]   
      interval: 30s    
      timeout: 10s    
      retries: 3        
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ------------------- Auth Service -------------------
  auth:
    build: ./auth       
    ports:
      - "6000:6000"     
    networks:
      - app-network     
    healthcheck:        
      test: ["CMD", "curl", "-f", "http://localhost:6000/health"]  
      interval: 30s    
      timeout: 10s      
      retries: 3        
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # ------------------- MySQL Database Service -------------------
  db:   # service name and we can define things inside the service
    image: mysql:8.0   # it will pull the image from docker registry by default with repo name mysql and tag is 8.0
    ports:   # it will maps the port for this service, the traffic is mapped from port 3306 directly 
      - "3306:3306"   # if needed we can change the port for this from 3306:80. so we can check the service at http://<local_host>:3306 but the traffic is mapped internally to 80
    networks:
      - app-network     
    environment:   # environment variable is used to set the application settings and secrets which are required for the system running without exposing them to the code.
      - MYSQL_ROOT_PASSWORD=rootpass
      - MYSQL_DATABASE=docker_demo
    volumes:
      - dbdata:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # .................... phpmyadmin service -----------------------    
  phpmyadmin:   
    image: phpmyadmin/phpmyadmin   
    restart: always
    ports:
      - "8081:80"      
    environment:
      - PMA_HOST=db
      - PMA_PORT=3306
      - MYSQL_ROOT_PASSWORD=rootpass
    depends_on:
      - db
    networks:
      - app-network
    healthcheck:
      test: curl --fail http://localhost:80 || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
# ------------------- Custom Docker Network -------------------
networks:
  app-network:
    driver: bridge     

# ------------------- Persistent Volume -------------------
volumes:
  dbdata:
